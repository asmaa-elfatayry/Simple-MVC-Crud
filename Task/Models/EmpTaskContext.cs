// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Task.Models;

public partial class EmpTaskContext : DbContext
{
    public EmpTaskContext()
    {
    }

    public EmpTaskContext(DbContextOptions<EmpTaskContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<User> Users { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=EmpTask;Integrated Security=True;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EmployeeCreatedByNavigations).HasConstraintName("FK_Employees_Users");

            entity.HasOne(d => d.Department).WithMany(p => p.Employees).HasConstraintName("FK_Employees_Departments");

            entity.HasOne(d => d.ModifaiedByNavigation).WithMany(p => p.EmployeeModifaiedByNavigations).HasConstraintName("FK_Employees_Users1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);



    public void SeedData()
    {
    
        if (Departments.Any() || Users.Any())
        {
            return; 
        }

      
        var departments = new List<Department>
    {
        new Department { Name = "HR", Description = "Human Resources Department" },
        new Department { Name = "IT", Description = "Information Technology Department" },
        new Department { Name = "Finance", Description = "Finance Department" },
     
    };
        Departments.AddRange(departments);

   
        var users = new List<User>
    {
        new User { Name = "John Doe", Email = "john.doe@example.com", Password = "password123" },
        new User { Name = "Jane Smith", Email = "jane.smith@example.com", Password = "password456" },
     
    };
        Users.AddRange(users);

     
        var employees = new List<Employee>
    {
        new Employee
        {
            Name = "Alice",
            DateOfBirth = new DateOnly( 5, 15,1990),
            Mobile = "1234567890",
            Email = "alice@example.com",
            HireDate = new DateOnly( 10, 1,2015),
            Salary = 50000.00m,
            ProfileImg = "user.png",
            DepartmentID = departments.First(d => d.Name == "HR").ID,
            CreatedDate = DateTime.Now,
            ModifiedDate = DateTime.Now,
            CreatedBy = users.First(u => u.Name == "John Doe").ID,
            ModifaiedBy = users.First(u => u.Name == "John Doe").ID
        },
        new Employee
        {
            Name = "Bob",
            DateOfBirth = new DateOnly( 5, 15,1990),
            Mobile = "9876543210",
            Email = "bob@example.com",
            HireDate = new DateOnly (10, 1,2015),
            Salary = 60000.00m,
            ProfileImg = "user.png",
            DepartmentID = departments.First(d => d.Name == "IT").ID,
            CreatedDate = DateTime.Now,
            ModifiedDate = DateTime.Now,
            CreatedBy = users.First(u => u.Name == "Jane Smith").ID,
            ModifaiedBy = users.First(u => u.Name == "Jane Smith").ID
        },
      
    };
        Employees.AddRange(employees);

        
        SaveChanges();
    }


}